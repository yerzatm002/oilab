const express = require("express");
const { Competition, User, CompetitionSubmission } = require("../../models");
const authMiddleware = require("../middleware/auth.middleware");
const adminMiddleware = require("../middleware/admin.middleware");

const router = express.Router();

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
router.get("/", authMiddleware, async (req, res) => {
    try {
        const competitions = await Competition.findAll();
        return res.json(competitions);
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –°–æ–∑–¥–∞—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.post("/create", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { title, description, startTime, endTime } = req.body;

        const competition = await Competition.create({
            title,
            description,
            startTime,
            endTime
        });

        return res.status(201).json({ message: "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", competition });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
router.post("/join", authMiddleware, async (req, res) => {
    try {
        const { competitionId } = req.body;
        const userId = req.user.id;

        const competition = await Competition.findByPk(competitionId);
        if (!competition) return res.status(404).json({ message: "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

        await competition.addUser(userId);
        return res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ" });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
router.get("/:id", authMiddleware, async (req, res) => {
    try {
        const competition = await Competition.findByPk(req.params.id, {
            include: [{ model: User, attributes: ["id", "name"] }]
        });

        if (!competition) return res.status(404).json({ message: "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

        return res.json(competition);
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ
router.post("/submit", authMiddleware, async (req, res) => {
    try {
        const { competitionId, solution, score } = req.body;
        const userId = req.user.id;

        const competition = await Competition.findByPk(competitionId);
        if (!competition) return res.status(404).json({ message: "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

        await CompetitionSubmission.create({
            competitionId,
            userId,
            solution,
            score
        });

        return res.json({ message: "–†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
router.get("/leaderboard", authMiddleware, async (req, res) => {
    try {
        const leaderboard = await CompetitionSubmission.findAll({
            attributes: ["userId", "competitionId", "score"],
            include: [{ model: User, attributes: ["id", "name"] }],
            order: [["score", "DESC"]]
        });

        return res.json(leaderboard);
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

module.exports = router;
