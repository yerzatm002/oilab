const express = require("express");
const router = express.Router();
const authMiddleware = require("../middleware/auth.middleware");
const adminMiddleware = require("../middleware/admin.middleware");
const { TestQuestion } = require("../../models");

// üîπ GET: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ —Ç–µ–º–µ (—Å—Ç—É–¥–µ–Ω—Ç)
router.get("/topic/:topicId", authMiddleware, async (req, res) => {
  try {
    const questions = await TestQuestion.findAll({
      where: { topicId: req.params.topicId },
    });
    res.json(questions);
  } catch (error) {
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

// üî∏ POST: –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const question = await TestQuestion.create(req.body);
    res.status(201).json(question);
  } catch (error) {
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

// üî∏ PUT: –û–±–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const updated = await TestQuestion.update(req.body, {
      where: { id: req.params.id },
    });
    res.json({ message: "–°“±—Ä–∞“õ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã", updated });
  } catch (error) {
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

// üî∏ DELETE: –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–∞–¥–º–∏–Ω)
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    await TestQuestion.destroy({
      where: { id: req.params.id },
    });
    res.json({ message: "–°“±—Ä–∞“õ ”©—à—ñ—Ä—ñ–ª–¥—ñ" });
  } catch (error) {
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

module.exports = router;
