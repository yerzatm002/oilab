const express = require("express");
const { Notification } = require("../../models");
const authMiddleware = require("../middleware/auth.middleware");

const router = express.Router();

// üîπ –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get("/:user_id", authMiddleware, async (req, res) => {
    try {
        const notifications = await Notification.findAll({
            where: { userId: req.params.user_id },
            order: [["createdAt", "DESC"]]
        });

        return res.json(notifications);
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
router.post("/read", authMiddleware, async (req, res) => {
    try {
        const { notificationId } = req.body;

        const notification = await Notification.findByPk(notificationId);
        if (!notification) return res.status(404).json({ message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

        notification.isRead = true;
        await notification.save();

        return res.json({ message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ" });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

module.exports = router;
