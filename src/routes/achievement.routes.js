const express = require("express");
const { Achievement, User, UserAchievements } = require("../../models");
const authMiddleware = require("../middleware/auth.middleware");
const adminMiddleware = require("../middleware/admin.middleware");

const router = express.Router();

// üîπ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
router.get("/:user_id", authMiddleware, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ UserAchievements
        const userAchievements = await UserAchievements.findAll({
            where: { userId: req.params.user_id },
            attributes: ["achievementId"], 
        });

        if (userAchievements.length === 0) {
            return res.json({ message: "–ñ–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä –∂–æ“õ", achievements: [] });
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const achievementIds = userAchievements.map((ua) => ua.achievementId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∞—á–∏–≤–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º–∏ ID
        const achievements = await Achievement.findAll({
            where: { id: achievementIds },
        });

        return res.json({ achievements });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});


// üîπ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.post("/add", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { achievement_name, points } = req.body;

        const achievement = await Achievement.create({ achievement_name, points });

        return res.status(201).json({ message: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", achievement });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
router.get("/all", authMiddleware, async (req, res) => {
    try {
        const achievements = await Achievement.findAll();
        return res.json(achievements);
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.post("/assign", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { userId, achievementId } = req.body;

        const user = await User.findByPk(userId);
        if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        const achievement = await Achievement.findByPk(achievementId);
        if (!achievement) return res.status(404).json({ message: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

        await UserAchievements.create({ userId, achievementId });

        return res.json({ message: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

module.exports = router;
