const express = require("express");
const { Task } = require("../../models");
const authMiddleware = require("../middleware/auth.middleware");
const adminMiddleware = require("../middleware/admin.middleware");

const router = express.Router();

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
router.get("/", authMiddleware, async (req, res) => {
    try {
        const tasks = await Task.findAll();
        return res.json(tasks);
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID
router.get("/:id", authMiddleware, async (req, res) => {
    try {
        const task = await Task.findByPk(req.params.id);

        if (!task) return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

        return res.json(task);
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { title, description, type, difficulty, tags, time_limit } = req.body;

        const task = await Task.create({
            title,
            description,
            type,
            difficulty,
            tags,
            time_limit
        });

        return res.status(201).json({ message: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞", task });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { title, description, type, difficulty, tags, time_limit } = req.body;

        const task = await Task.findByPk(req.params.id);
        if (!task) return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

        task.title = title || task.title;
        task.description = description || task.description;
        task.type = type || task.type;
        task.difficulty = difficulty || task.difficulty;
        task.tags = tags || task.tags;
        task.time_limit = time_limit || task.time_limit;

        await task.save();

        return res.json({ message: "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", task });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üîπ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const task = await Task.findByPk(req.params.id);
        if (!task) return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

        await task.destroy();

        return res.json({ message: "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞" });
    } catch (error) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

module.exports = router;
