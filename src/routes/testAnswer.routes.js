const express = require("express");
const router = express.Router();
const authMiddleware = require("../middleware/auth.middleware");
const adminMiddleware = require("../middleware/admin.middleware");
const { UserTestAnswer, TestQuestion } = require("../../models");

// üîπ POST /test-answers ‚Äì –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç
router.post("/", authMiddleware, async (req, res) => {
  try {
    const { answers } = req.body; // –º–∞—Å—Å–∏–≤ [{ questionId, user_answer }]
    const userId = req.user.id;

    const results = [];

    for (const ans of answers) {
      const question = await TestQuestion.findByPk(ans.questionId);

      const isCorrect = question.correct_answer === ans.user_answer;

      const saved = await UserTestAnswer.create({
        userId,
        questionId: ans.questionId,
        user_answer: ans.user_answer,
        is_correct: isCorrect,
      });

      results.push(saved);
    }

    res.status(201).json({ message: "–ñ–∞—É–∞–ø—Ç–∞—Ä —Å–∞“õ—Ç–∞–ª–¥—ã", results });
  } catch (error) {
    console.log(error)
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

// üîπ GET /test-answers/user/:userId ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–µ–Ω–∏–∫–∞
router.get("/user/:userId", authMiddleware, async (req, res) => {
  try {
    const answers = await UserTestAnswer.findAll({
      where: { userId: req.params.userId },
    });
    res.json(answers);
  } catch (error) {
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

// üî∏ GET /test-answers ‚Äì –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get("/", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const allAnswers = await UserTestAnswer.findAll();
    res.json(allAnswers);
  } catch (error) {
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

// üî∏ GET /test-answers/user/:userId ‚Äì –û—Ç–≤–µ—Ç—ã –ø–æ —É—á–µ–Ω–∏–∫—É (–¥–ª—è –∞–¥–º–∏–Ω–∞)
router.get("/admin/:userId", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const answers = await UserTestAnswer.findAll({
      where: { userId: req.params.userId },
    });
    res.json(answers);
  } catch (error) {
    res.status(500).json({ message: "“ö–∞—Ç–µ", error });
  }
});

module.exports = router;
