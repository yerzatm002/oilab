const http = require("http");
const { Server } = require("socket.io");
const dotenv = require("dotenv");
const app = require("./app.js");
const sequelize = require("./config/db.js");

dotenv.config();

// üîπ –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç
const PORT = process.env.PORT || 5000;

// üîπ –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(app);

// üîπ WebSocket-—Å–µ—Ä–≤–µ—Ä (Socket.io)
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// üîπ WebSocket —Å–æ–±—ã—Ç–∏—è
io.on("connection", (socket) => {
    console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    // üéØ –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
    socket.on("competition:update", (data) => {
        console.log(`üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:`, data);

        // üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        io.emit("competition:update", data);
    });

    socket.on("disconnect", () => {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    });
});

io.on("connection", (socket) => {
    console.log(`üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    // üéØ –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è "send-notification"
    socket.on("send-notification", async (data) => {
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:`, data);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
        const notification = await Notification.create({
            userId: data.userId,
            message: data.message
        });

        // üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        io.to(data.userId).emit("receive-notification", {
            id: notification.id,
            message: notification.message,
            isRead: notification.isRead,
            createdAt: notification.createdAt
        });
    });

    socket.on("disconnect", () => {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    });
});

io.on("connection", (socket) => {
    console.log(`üß† AI assistant connected: ${socket.id}`);

    socket.on("ai:ask", async (data) => {
        console.log(`üîç AI request: ${data.prompt}`);

        try {
            // Send request to GPT4All
            const response = await axios.post(GPT4ALL_API_URL, {
                model: "gpt4all",
                messages: [{ role: "user", content: data.prompt }],
                max_tokens: 200
            });

            // Send AI response to client
            socket.emit("ai:response", { response: response.data });

        } catch (error) {
            console.error("AI Error:", error);
            socket.emit("ai:error", { message: "AI request failed" });
        }
    });

    socket.on("disconnect", () => {
        console.log(`‚ùå AI assistant disconnected: ${socket.id}`);
    });
});


// üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î PostgreSQL
sequelize.authenticate()
    .then(() => {
        console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞");

        // üîπ –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ë–î
        if (process.env.NODE_ENV === "test") {
            return sequelize.sync({ force: true });
        }
    })
    .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err));

// üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

module.exports = { server, io }; // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
